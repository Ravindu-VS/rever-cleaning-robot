#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// LCD object (16x4)
LiquidCrystal_I2C lcd(0x27, 16, 4); // Adjust address if needed

// Define motor pins for wheels
#define WHEEL_IN1 9
#define WHEEL_IN2 8
#define WHEEL_IN3 11
#define WHEEL_IN4 10

// Define motor pins for conveyor
#define CONVEYOR_IN1 4
#define CONVEYOR_IN2 5
#define CONVEYOR_IN3 6
#define CONVEYOR_IN4 7

// Define ultrasonic sensor pins
#define TRIG_FRONT A0
#define ECHO_FRONT A1
#define TRIG_LEFT A2
#define ECHO_LEFT A3
#define TRIG_RIGHT 2
#define ECHO_RIGHT 3

// Define buzzer pin
#define BUZZER 13

void setup() {
  // Initialize Serial Monitor
  Serial.begin(9600);

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("River Cleaner");
  delay(2000);

  // Initialize motor pins
  pinMode(WHEEL_IN1, OUTPUT);
  pinMode(WHEEL_IN2, OUTPUT);
  pinMode(WHEEL_IN3, OUTPUT);
  pinMode(WHEEL_IN4, OUTPUT);
  pinMode(CONVEYOR_IN1, OUTPUT);
  pinMode(CONVEYOR_IN2, OUTPUT);
  pinMode(CONVEYOR_IN3, OUTPUT);
  pinMode(CONVEYOR_IN4, OUTPUT);

  // Initialize ultrasonic sensor pins
  pinMode(TRIG_FRONT, OUTPUT);
  pinMode(ECHO_FRONT, INPUT);
  pinMode(TRIG_LEFT, OUTPUT);
  pinMode(ECHO_LEFT, INPUT);
  pinMode(TRIG_RIGHT, OUTPUT);
  pinMode(ECHO_RIGHT, INPUT);

  // Initialize buzzer
  pinMode(BUZZER, OUTPUT);

  // Start conveyor belt
  activateConveyor();

  // Serial monitor initialization message
  Serial.println("River Cleaner Initialized");
}

void loop() {
  // Get distances from ultrasonic sensors
  long frontDistance = getUltrasonicDistance(TRIG_FRONT, ECHO_FRONT);
  long leftDistance = getUltrasonicDistance(TRIG_LEFT, ECHO_LEFT);
  long rightDistance = getUltrasonicDistance(TRIG_RIGHT, ECHO_RIGHT);

  // Update LCD with sensor data
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Front: ");
  lcd.print(frontDistance);
  lcd.print("cm");

  lcd.setCursor(0, 1);
  lcd.print("Left: ");
  lcd.print(leftDistance);
  lcd.print("cm R: ");
  lcd.print(rightDistance);
  lcd.print("cm");

  // Output to Serial Monitor
  Serial.print("Front Distance: ");
  Serial.print(frontDistance);
  Serial.println(" cm");
  Serial.print("Left Distance: ");
  Serial.print(leftDistance);
  Serial.println(" cm");
  Serial.print("Right Distance: ");
  Serial.print(rightDistance);
  Serial.println(" cm");

  // Obstacle avoidance and edge detection logic
  if (frontDistance < 20) {
    lcd.setCursor(0, 2);
    lcd.print("Obstacle Ahead!");
    stopMotors();
    alert();
    Serial.println("Obstacle Detected Ahead");
    delay(1000);
  } else if (leftDistance < 15) {
    lcd.setCursor(0, 2);
    lcd.print("Edge Left! Turn R");
    turnRight();
    alert();
    Serial.println("Edge Detected: Left - Turning Right");
    delay(1000);
  } else if (rightDistance < 15) {
    lcd.setCursor(0, 2);
    lcd.print("Edge Right! Turn L");
    turnLeft();
    alert();
    Serial.println("Edge Detected: Right - Turning Left");
    delay(1000);
  } else {
    lcd.setCursor(0, 2);
    lcd.print("Path Clear     ");
    Serial.println("Path Clear");
    moveForward();
  }

  delay(500);
}

// Function to get distance from ultrasonic sensor
long getUltrasonicDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  long distance = duration * 0.034 / 2; // Convert to cm
  return distance;
}

// Function to move robot forward
void moveForward() {
  digitalWrite(WHEEL_IN1, HIGH);
  digitalWrite(WHEEL_IN2, LOW);
  digitalWrite(WHEEL_IN3, HIGH);
  digitalWrite(WHEEL_IN4, LOW);
  Serial.println("Robot Moving Forward");
}

// Function to stop all motors
void stopMotors() {
  digitalWrite(WHEEL_IN1, LOW);
  digitalWrite(WHEEL_IN2, LOW);
  digitalWrite(WHEEL_IN3, LOW);
  digitalWrite(WHEEL_IN4, LOW);
  Serial.println("Motors Stopped");
}

// Function to turn the robot left
void turnLeft() {
  digitalWrite(WHEEL_IN1, HIGH); // Left wheel moves forward
  digitalWrite(WHEEL_IN2, LOW);
  digitalWrite(WHEEL_IN3, LOW); // Right wheel stops
  digitalWrite(WHEEL_IN4, HIGH);
  delay(1000); // Adjust delay for the turn
  stopMotors();
}

// Function to turn the robot right
void turnRight() {
  digitalWrite(WHEEL_IN1, LOW); // Left wheel stops
  digitalWrite(WHEEL_IN2, HIGH);
  digitalWrite(WHEEL_IN3, HIGH); // Right wheel moves forward
  digitalWrite(WHEEL_IN4, LOW);
  delay(1000); // Adjust delay for the turn
  stopMotors();
}

// Function to activate conveyor
void activateConveyor() {
  digitalWrite(CONVEYOR_IN1, HIGH);
  digitalWrite(CONVEYOR_IN2, LOW);
  digitalWrite(CONVEYOR_IN3, HIGH);
  digitalWrite(CONVEYOR_IN4, LOW);
  Serial.println("Conveyor Started");
}

// Function to trigger alert (buzzer)
void alert() {
  digitalWrite(BUZZER, HIGH);
  delay(500);
  digitalWrite(BUZZER, LOW);
  Serial.println("Alert Triggered");
}
